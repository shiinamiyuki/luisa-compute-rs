/* automatically generated by rust-bindgen 0.60.1 */

pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type size_t = ::std::os::raw::c_ulong;
impl LCAccelBuildRequest {
    pub const ACCEL_BUILD_REQUEST_PREFER_UPDATE: LCAccelBuildRequest = LCAccelBuildRequest(0);
}
impl LCAccelBuildRequest {
    pub const ACCEL_BUILD_REQUEST_FORCE_BUILD: LCAccelBuildRequest = LCAccelBuildRequest(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct LCAccelBuildRequest(pub ::std::os::raw::c_uint);
impl LCAccelUsageHint {
    pub const ACCEL_USAGE_HINT_FAST_TRACE: LCAccelUsageHint = LCAccelUsageHint(0);
}
impl LCAccelUsageHint {
    pub const ACCEL_USAGE_HINT_FAST_BUILD: LCAccelUsageHint = LCAccelUsageHint(1);
}
impl LCAccelUsageHint {
    pub const ACCEL_USAGE_HINT_FAST_UPDATE: LCAccelUsageHint = LCAccelUsageHint(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct LCAccelUsageHint(pub ::std::os::raw::c_uint);
impl LCBindlessArrayUpdateOperation {
    pub const BINDLESS_ARRAY_UPDATE_OPERATION_NONE: LCBindlessArrayUpdateOperation =
        LCBindlessArrayUpdateOperation(0);
}
impl LCBindlessArrayUpdateOperation {
    pub const BINDLESS_ARRAY_UPDATE_OPERATION_EMPLACE: LCBindlessArrayUpdateOperation =
        LCBindlessArrayUpdateOperation(1);
}
impl LCBindlessArrayUpdateOperation {
    pub const BINDLESS_ARRAY_UPDATE_OPERATION_REMOVE: LCBindlessArrayUpdateOperation =
        LCBindlessArrayUpdateOperation(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct LCBindlessArrayUpdateOperation(pub ::std::os::raw::c_uint);
impl LCPixelFormat {
    pub const PIXEL_FORMAT_R8_SINT: LCPixelFormat = LCPixelFormat(0);
}
impl LCPixelFormat {
    pub const PIXEL_FORMAT_R8_UINT: LCPixelFormat = LCPixelFormat(1);
}
impl LCPixelFormat {
    pub const PIXEL_FORMAT_R8_UNORM: LCPixelFormat = LCPixelFormat(2);
}
impl LCPixelFormat {
    pub const PIXEL_FORMAT_RG8_SINT: LCPixelFormat = LCPixelFormat(3);
}
impl LCPixelFormat {
    pub const PIXEL_FORMAT_RG8_UINT: LCPixelFormat = LCPixelFormat(4);
}
impl LCPixelFormat {
    pub const PIXEL_FORMAT_RG8_UNORM: LCPixelFormat = LCPixelFormat(5);
}
impl LCPixelFormat {
    pub const PIXEL_FORMAT_RGBA8_SINT: LCPixelFormat = LCPixelFormat(6);
}
impl LCPixelFormat {
    pub const PIXEL_FORMAT_RGBA8_UINT: LCPixelFormat = LCPixelFormat(7);
}
impl LCPixelFormat {
    pub const PIXEL_FORMAT_RGBA8_UNORM: LCPixelFormat = LCPixelFormat(8);
}
impl LCPixelFormat {
    pub const PIXEL_FORMAT_R16_SINT: LCPixelFormat = LCPixelFormat(9);
}
impl LCPixelFormat {
    pub const PIXEL_FORMAT_R16_UINT: LCPixelFormat = LCPixelFormat(10);
}
impl LCPixelFormat {
    pub const PIXEL_FORMAT_R16_UNORM: LCPixelFormat = LCPixelFormat(11);
}
impl LCPixelFormat {
    pub const PIXEL_FORMAT_RG16_SINT: LCPixelFormat = LCPixelFormat(12);
}
impl LCPixelFormat {
    pub const PIXEL_FORMAT_RG16_UINT: LCPixelFormat = LCPixelFormat(13);
}
impl LCPixelFormat {
    pub const PIXEL_FORMAT_RG16_UNORM: LCPixelFormat = LCPixelFormat(14);
}
impl LCPixelFormat {
    pub const PIXEL_FORMAT_RGBA16_SINT: LCPixelFormat = LCPixelFormat(15);
}
impl LCPixelFormat {
    pub const PIXEL_FORMAT_RGBA16_UINT: LCPixelFormat = LCPixelFormat(16);
}
impl LCPixelFormat {
    pub const PIXEL_FORMAT_RGBA16_UNORM: LCPixelFormat = LCPixelFormat(17);
}
impl LCPixelFormat {
    pub const PIXEL_FORMAT_R32_SINT: LCPixelFormat = LCPixelFormat(18);
}
impl LCPixelFormat {
    pub const PIXEL_FORMAT_R32_UINT: LCPixelFormat = LCPixelFormat(19);
}
impl LCPixelFormat {
    pub const PIXEL_FORMAT_RG32_SINT: LCPixelFormat = LCPixelFormat(20);
}
impl LCPixelFormat {
    pub const PIXEL_FORMAT_RG32_UINT: LCPixelFormat = LCPixelFormat(21);
}
impl LCPixelFormat {
    pub const PIXEL_FORMAT_RGBA32_SINT: LCPixelFormat = LCPixelFormat(22);
}
impl LCPixelFormat {
    pub const PIXEL_FORMAT_RGBA32_UINT: LCPixelFormat = LCPixelFormat(23);
}
impl LCPixelFormat {
    pub const PIXEL_FORMAT_R16_F: LCPixelFormat = LCPixelFormat(24);
}
impl LCPixelFormat {
    pub const PIXEL_FORMAT_RG16_F: LCPixelFormat = LCPixelFormat(25);
}
impl LCPixelFormat {
    pub const PIXEL_FORMAT_RGBA16_F: LCPixelFormat = LCPixelFormat(26);
}
impl LCPixelFormat {
    pub const PIXEL_FORMAT_R32_F: LCPixelFormat = LCPixelFormat(27);
}
impl LCPixelFormat {
    pub const PIXEL_FORMAT_RG32_F: LCPixelFormat = LCPixelFormat(28);
}
impl LCPixelFormat {
    pub const PIXEL_FORMAT_RGBA32_F: LCPixelFormat = LCPixelFormat(29);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct LCPixelFormat(pub ::std::os::raw::c_uint);
impl LCPixelStorage {
    pub const PIXEL_STORAGE_BYTE1: LCPixelStorage = LCPixelStorage(0);
}
impl LCPixelStorage {
    pub const PIXEL_STORAGE_BYTE2: LCPixelStorage = LCPixelStorage(1);
}
impl LCPixelStorage {
    pub const PIXEL_STORAGE_BYTE4: LCPixelStorage = LCPixelStorage(2);
}
impl LCPixelStorage {
    pub const PIXEL_STORAGE_SHORT1: LCPixelStorage = LCPixelStorage(3);
}
impl LCPixelStorage {
    pub const PIXEL_STORAGE_SHORT2: LCPixelStorage = LCPixelStorage(4);
}
impl LCPixelStorage {
    pub const PIXEL_STORAGE_SHORT4: LCPixelStorage = LCPixelStorage(5);
}
impl LCPixelStorage {
    pub const PIXEL_STORAGE_INT1: LCPixelStorage = LCPixelStorage(6);
}
impl LCPixelStorage {
    pub const PIXEL_STORAGE_INT2: LCPixelStorage = LCPixelStorage(7);
}
impl LCPixelStorage {
    pub const PIXEL_STORAGE_INT4: LCPixelStorage = LCPixelStorage(8);
}
impl LCPixelStorage {
    pub const PIXEL_STORAGE_HALF1: LCPixelStorage = LCPixelStorage(9);
}
impl LCPixelStorage {
    pub const PIXEL_STORAGE_HALF2: LCPixelStorage = LCPixelStorage(10);
}
impl LCPixelStorage {
    pub const PIXEL_STORAGE_HALF4: LCPixelStorage = LCPixelStorage(11);
}
impl LCPixelStorage {
    pub const PIXEL_STORAGE_FLOAT1: LCPixelStorage = LCPixelStorage(12);
}
impl LCPixelStorage {
    pub const PIXEL_STORAGE_FLOAT2: LCPixelStorage = LCPixelStorage(13);
}
impl LCPixelStorage {
    pub const PIXEL_STORAGE_FLOAT4: LCPixelStorage = LCPixelStorage(14);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct LCPixelStorage(pub ::std::os::raw::c_uint);
impl LCSamplerAddress {
    pub const SAMPLER_ADDRESS_EDGE: LCSamplerAddress = LCSamplerAddress(0);
}
impl LCSamplerAddress {
    pub const SAMPLER_ADDRESS_REPEAT: LCSamplerAddress = LCSamplerAddress(1);
}
impl LCSamplerAddress {
    pub const SAMPLER_ADDRESS_MIRROR: LCSamplerAddress = LCSamplerAddress(2);
}
impl LCSamplerAddress {
    pub const SAMPLER_ADDRESS_ZERO: LCSamplerAddress = LCSamplerAddress(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct LCSamplerAddress(pub ::std::os::raw::c_uint);
impl LCSamplerFilter {
    pub const SAMPLER_FILTER_POINT: LCSamplerFilter = LCSamplerFilter(0);
}
impl LCSamplerFilter {
    pub const SAMPLER_FILTER_LINEAR_POINT: LCSamplerFilter = LCSamplerFilter(1);
}
impl LCSamplerFilter {
    pub const SAMPLER_FILTER_LINEAR_LINEAR: LCSamplerFilter = LCSamplerFilter(2);
}
impl LCSamplerFilter {
    pub const SAMPLER_FILTER_ANISOTROPIC: LCSamplerFilter = LCSamplerFilter(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct LCSamplerFilter(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCBuffer {
    pub _0: u64,
}
#[test]
fn bindgen_test_layout_LCBuffer() {
    assert_eq!(
        ::std::mem::size_of::<LCBuffer>(),
        8usize,
        concat!("Size of: ", stringify!(LCBuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<LCBuffer>(),
        8usize,
        concat!("Alignment of ", stringify!(LCBuffer))
    );
    fn test_field__0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBuffer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBuffer),
                "::",
                stringify!(_0)
            )
        );
    }
    test_field__0();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCContext {
    pub _0: u64,
}
#[test]
fn bindgen_test_layout_LCContext() {
    assert_eq!(
        ::std::mem::size_of::<LCContext>(),
        8usize,
        concat!("Size of: ", stringify!(LCContext))
    );
    assert_eq!(
        ::std::mem::align_of::<LCContext>(),
        8usize,
        concat!("Alignment of ", stringify!(LCContext))
    );
    fn test_field__0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCContext),
                "::",
                stringify!(_0)
            )
        );
    }
    test_field__0();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCDevice {
    pub _0: u64,
}
#[test]
fn bindgen_test_layout_LCDevice() {
    assert_eq!(
        ::std::mem::size_of::<LCDevice>(),
        8usize,
        concat!("Size of: ", stringify!(LCDevice))
    );
    assert_eq!(
        ::std::mem::align_of::<LCDevice>(),
        8usize,
        concat!("Alignment of ", stringify!(LCDevice))
    );
    fn test_field__0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDevice>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDevice),
                "::",
                stringify!(_0)
            )
        );
    }
    test_field__0();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCEvent {
    pub _0: u64,
}
#[test]
fn bindgen_test_layout_LCEvent() {
    assert_eq!(
        ::std::mem::size_of::<LCEvent>(),
        8usize,
        concat!("Size of: ", stringify!(LCEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<LCEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(LCEvent))
    );
    fn test_field__0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCEvent>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCEvent),
                "::",
                stringify!(_0)
            )
        );
    }
    test_field__0();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCStream {
    pub _0: u64,
}
#[test]
fn bindgen_test_layout_LCStream() {
    assert_eq!(
        ::std::mem::size_of::<LCStream>(),
        8usize,
        concat!("Size of: ", stringify!(LCStream))
    );
    assert_eq!(
        ::std::mem::align_of::<LCStream>(),
        8usize,
        concat!("Alignment of ", stringify!(LCStream))
    );
    fn test_field__0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCStream>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCStream),
                "::",
                stringify!(_0)
            )
        );
    }
    test_field__0();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCShader {
    pub _0: u64,
}
#[test]
fn bindgen_test_layout_LCShader() {
    assert_eq!(
        ::std::mem::size_of::<LCShader>(),
        8usize,
        concat!("Size of: ", stringify!(LCShader))
    );
    assert_eq!(
        ::std::mem::align_of::<LCShader>(),
        8usize,
        concat!("Alignment of ", stringify!(LCShader))
    );
    fn test_field__0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCShader>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCShader),
                "::",
                stringify!(_0)
            )
        );
    }
    test_field__0();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCAccelBuildModificationFlags {
    pub bits: u32,
}
#[test]
fn bindgen_test_layout_LCAccelBuildModificationFlags() {
    assert_eq!(
        ::std::mem::size_of::<LCAccelBuildModificationFlags>(),
        4usize,
        concat!("Size of: ", stringify!(LCAccelBuildModificationFlags))
    );
    assert_eq!(
        ::std::mem::align_of::<LCAccelBuildModificationFlags>(),
        4usize,
        concat!("Alignment of ", stringify!(LCAccelBuildModificationFlags))
    );
    fn test_field_bits() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCAccelBuildModificationFlags>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bits) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCAccelBuildModificationFlags),
                "::",
                stringify!(bits)
            )
        );
    }
    test_field_bits();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCAccelBuildModification {
    pub index: u32,
    pub flags: LCAccelBuildModificationFlags,
    pub visibility: u8,
    pub mesh: u64,
    pub affine: [f32; 12usize],
}
#[test]
fn bindgen_test_layout_LCAccelBuildModification() {
    assert_eq!(
        ::std::mem::size_of::<LCAccelBuildModification>(),
        72usize,
        concat!("Size of: ", stringify!(LCAccelBuildModification))
    );
    assert_eq!(
        ::std::mem::align_of::<LCAccelBuildModification>(),
        8usize,
        concat!("Alignment of ", stringify!(LCAccelBuildModification))
    );
    fn test_field_index() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCAccelBuildModification>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCAccelBuildModification),
                "::",
                stringify!(index)
            )
        );
    }
    test_field_index();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCAccelBuildModification>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(LCAccelBuildModification),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_visibility() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCAccelBuildModification>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).visibility) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(LCAccelBuildModification),
                "::",
                stringify!(visibility)
            )
        );
    }
    test_field_visibility();
    fn test_field_mesh() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCAccelBuildModification>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mesh) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(LCAccelBuildModification),
                "::",
                stringify!(mesh)
            )
        );
    }
    test_field_mesh();
    fn test_field_affine() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCAccelBuildModification>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).affine) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(LCAccelBuildModification),
                "::",
                stringify!(affine)
            )
        );
    }
    test_field_affine();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCSampler {
    pub filter: LCSamplerFilter,
    pub address: LCSamplerAddress,
}
#[test]
fn bindgen_test_layout_LCSampler() {
    assert_eq!(
        ::std::mem::size_of::<LCSampler>(),
        8usize,
        concat!("Size of: ", stringify!(LCSampler))
    );
    assert_eq!(
        ::std::mem::align_of::<LCSampler>(),
        4usize,
        concat!("Alignment of ", stringify!(LCSampler))
    );
    fn test_field_filter() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCSampler>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).filter) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCSampler),
                "::",
                stringify!(filter)
            )
        );
    }
    test_field_filter();
    fn test_field_address() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCSampler>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(LCSampler),
                "::",
                stringify!(address)
            )
        );
    }
    test_field_address();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCBufferUploadCommand {
    pub buffer: LCBuffer,
    pub offset: size_t,
    pub size: size_t,
    pub data: *const u8,
}
#[test]
fn bindgen_test_layout_LCBufferUploadCommand() {
    assert_eq!(
        ::std::mem::size_of::<LCBufferUploadCommand>(),
        32usize,
        concat!("Size of: ", stringify!(LCBufferUploadCommand))
    );
    assert_eq!(
        ::std::mem::align_of::<LCBufferUploadCommand>(),
        8usize,
        concat!("Alignment of ", stringify!(LCBufferUploadCommand))
    );
    fn test_field_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBufferUploadCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBufferUploadCommand),
                "::",
                stringify!(buffer)
            )
        );
    }
    test_field_buffer();
    fn test_field_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBufferUploadCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBufferUploadCommand),
                "::",
                stringify!(offset)
            )
        );
    }
    test_field_offset();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBufferUploadCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBufferUploadCommand),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBufferUploadCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBufferUploadCommand),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCBufferDownloadCommand {
    pub buffer: LCBuffer,
    pub offset: size_t,
    pub size: size_t,
    pub data: *mut u8,
}
#[test]
fn bindgen_test_layout_LCBufferDownloadCommand() {
    assert_eq!(
        ::std::mem::size_of::<LCBufferDownloadCommand>(),
        32usize,
        concat!("Size of: ", stringify!(LCBufferDownloadCommand))
    );
    assert_eq!(
        ::std::mem::align_of::<LCBufferDownloadCommand>(),
        8usize,
        concat!("Alignment of ", stringify!(LCBufferDownloadCommand))
    );
    fn test_field_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBufferDownloadCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBufferDownloadCommand),
                "::",
                stringify!(buffer)
            )
        );
    }
    test_field_buffer();
    fn test_field_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBufferDownloadCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBufferDownloadCommand),
                "::",
                stringify!(offset)
            )
        );
    }
    test_field_offset();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBufferDownloadCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBufferDownloadCommand),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBufferDownloadCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBufferDownloadCommand),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCBufferCopyCommand {
    pub src: LCBuffer,
    pub src_offset: size_t,
    pub dst: LCBuffer,
    pub dst_offset: size_t,
    pub size: size_t,
}
#[test]
fn bindgen_test_layout_LCBufferCopyCommand() {
    assert_eq!(
        ::std::mem::size_of::<LCBufferCopyCommand>(),
        40usize,
        concat!("Size of: ", stringify!(LCBufferCopyCommand))
    );
    assert_eq!(
        ::std::mem::align_of::<LCBufferCopyCommand>(),
        8usize,
        concat!("Alignment of ", stringify!(LCBufferCopyCommand))
    );
    fn test_field_src() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBufferCopyCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBufferCopyCommand),
                "::",
                stringify!(src)
            )
        );
    }
    test_field_src();
    fn test_field_src_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBufferCopyCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).src_offset) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBufferCopyCommand),
                "::",
                stringify!(src_offset)
            )
        );
    }
    test_field_src_offset();
    fn test_field_dst() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBufferCopyCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBufferCopyCommand),
                "::",
                stringify!(dst)
            )
        );
    }
    test_field_dst();
    fn test_field_dst_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBufferCopyCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dst_offset) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBufferCopyCommand),
                "::",
                stringify!(dst_offset)
            )
        );
    }
    test_field_dst_offset();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBufferCopyCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBufferCopyCommand),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCTexture {
    pub _0: u64,
}
#[test]
fn bindgen_test_layout_LCTexture() {
    assert_eq!(
        ::std::mem::size_of::<LCTexture>(),
        8usize,
        concat!("Size of: ", stringify!(LCTexture))
    );
    assert_eq!(
        ::std::mem::align_of::<LCTexture>(),
        8usize,
        concat!("Alignment of ", stringify!(LCTexture))
    );
    fn test_field__0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCTexture>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCTexture),
                "::",
                stringify!(_0)
            )
        );
    }
    test_field__0();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCBufferToTextureCopyCommand {
    pub buffer: LCBuffer,
    pub buffer_offset: size_t,
    pub texture: LCTexture,
    pub storage: LCPixelStorage,
    pub texture_level: u32,
    pub texture_size: [u32; 3usize],
}
#[test]
fn bindgen_test_layout_LCBufferToTextureCopyCommand() {
    assert_eq!(
        ::std::mem::size_of::<LCBufferToTextureCopyCommand>(),
        48usize,
        concat!("Size of: ", stringify!(LCBufferToTextureCopyCommand))
    );
    assert_eq!(
        ::std::mem::align_of::<LCBufferToTextureCopyCommand>(),
        8usize,
        concat!("Alignment of ", stringify!(LCBufferToTextureCopyCommand))
    );
    fn test_field_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBufferToTextureCopyCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBufferToTextureCopyCommand),
                "::",
                stringify!(buffer)
            )
        );
    }
    test_field_buffer();
    fn test_field_buffer_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBufferToTextureCopyCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer_offset) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBufferToTextureCopyCommand),
                "::",
                stringify!(buffer_offset)
            )
        );
    }
    test_field_buffer_offset();
    fn test_field_texture() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBufferToTextureCopyCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).texture) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBufferToTextureCopyCommand),
                "::",
                stringify!(texture)
            )
        );
    }
    test_field_texture();
    fn test_field_storage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBufferToTextureCopyCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).storage) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBufferToTextureCopyCommand),
                "::",
                stringify!(storage)
            )
        );
    }
    test_field_storage();
    fn test_field_texture_level() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBufferToTextureCopyCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).texture_level) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBufferToTextureCopyCommand),
                "::",
                stringify!(texture_level)
            )
        );
    }
    test_field_texture_level();
    fn test_field_texture_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBufferToTextureCopyCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).texture_size) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBufferToTextureCopyCommand),
                "::",
                stringify!(texture_size)
            )
        );
    }
    test_field_texture_size();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCTextureToBufferCopyCommand {
    pub buffer: LCBuffer,
    pub buffer_offset: size_t,
    pub texture: LCTexture,
    pub storage: LCPixelStorage,
    pub texture_level: u32,
    pub texture_size: [u32; 3usize],
}
#[test]
fn bindgen_test_layout_LCTextureToBufferCopyCommand() {
    assert_eq!(
        ::std::mem::size_of::<LCTextureToBufferCopyCommand>(),
        48usize,
        concat!("Size of: ", stringify!(LCTextureToBufferCopyCommand))
    );
    assert_eq!(
        ::std::mem::align_of::<LCTextureToBufferCopyCommand>(),
        8usize,
        concat!("Alignment of ", stringify!(LCTextureToBufferCopyCommand))
    );
    fn test_field_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCTextureToBufferCopyCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCTextureToBufferCopyCommand),
                "::",
                stringify!(buffer)
            )
        );
    }
    test_field_buffer();
    fn test_field_buffer_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCTextureToBufferCopyCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer_offset) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(LCTextureToBufferCopyCommand),
                "::",
                stringify!(buffer_offset)
            )
        );
    }
    test_field_buffer_offset();
    fn test_field_texture() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCTextureToBufferCopyCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).texture) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(LCTextureToBufferCopyCommand),
                "::",
                stringify!(texture)
            )
        );
    }
    test_field_texture();
    fn test_field_storage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCTextureToBufferCopyCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).storage) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(LCTextureToBufferCopyCommand),
                "::",
                stringify!(storage)
            )
        );
    }
    test_field_storage();
    fn test_field_texture_level() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCTextureToBufferCopyCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).texture_level) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(LCTextureToBufferCopyCommand),
                "::",
                stringify!(texture_level)
            )
        );
    }
    test_field_texture_level();
    fn test_field_texture_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCTextureToBufferCopyCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).texture_size) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(LCTextureToBufferCopyCommand),
                "::",
                stringify!(texture_size)
            )
        );
    }
    test_field_texture_size();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCTextureUploadCommand {
    pub texture: LCTexture,
    pub storage: LCPixelStorage,
    pub level: u32,
    pub size: [u32; 3usize],
    pub data: *const u8,
}
#[test]
fn bindgen_test_layout_LCTextureUploadCommand() {
    assert_eq!(
        ::std::mem::size_of::<LCTextureUploadCommand>(),
        40usize,
        concat!("Size of: ", stringify!(LCTextureUploadCommand))
    );
    assert_eq!(
        ::std::mem::align_of::<LCTextureUploadCommand>(),
        8usize,
        concat!("Alignment of ", stringify!(LCTextureUploadCommand))
    );
    fn test_field_texture() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCTextureUploadCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).texture) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCTextureUploadCommand),
                "::",
                stringify!(texture)
            )
        );
    }
    test_field_texture();
    fn test_field_storage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCTextureUploadCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).storage) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(LCTextureUploadCommand),
                "::",
                stringify!(storage)
            )
        );
    }
    test_field_storage();
    fn test_field_level() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCTextureUploadCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(LCTextureUploadCommand),
                "::",
                stringify!(level)
            )
        );
    }
    test_field_level();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCTextureUploadCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(LCTextureUploadCommand),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCTextureUploadCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(LCTextureUploadCommand),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCTextureDownloadCommand {
    pub texture: LCTexture,
    pub storage: LCPixelStorage,
    pub level: u32,
    pub size: [u32; 3usize],
    pub data: *mut u8,
}
#[test]
fn bindgen_test_layout_LCTextureDownloadCommand() {
    assert_eq!(
        ::std::mem::size_of::<LCTextureDownloadCommand>(),
        40usize,
        concat!("Size of: ", stringify!(LCTextureDownloadCommand))
    );
    assert_eq!(
        ::std::mem::align_of::<LCTextureDownloadCommand>(),
        8usize,
        concat!("Alignment of ", stringify!(LCTextureDownloadCommand))
    );
    fn test_field_texture() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCTextureDownloadCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).texture) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCTextureDownloadCommand),
                "::",
                stringify!(texture)
            )
        );
    }
    test_field_texture();
    fn test_field_storage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCTextureDownloadCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).storage) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(LCTextureDownloadCommand),
                "::",
                stringify!(storage)
            )
        );
    }
    test_field_storage();
    fn test_field_level() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCTextureDownloadCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(LCTextureDownloadCommand),
                "::",
                stringify!(level)
            )
        );
    }
    test_field_level();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCTextureDownloadCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(LCTextureDownloadCommand),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCTextureDownloadCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(LCTextureDownloadCommand),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCTextureCopyCommand {
    pub storage: LCPixelStorage,
    pub src: LCTexture,
    pub dst: LCTexture,
    pub size: [u32; 3usize],
    pub src_level: u32,
    pub dst_level: u32,
}
#[test]
fn bindgen_test_layout_LCTextureCopyCommand() {
    assert_eq!(
        ::std::mem::size_of::<LCTextureCopyCommand>(),
        48usize,
        concat!("Size of: ", stringify!(LCTextureCopyCommand))
    );
    assert_eq!(
        ::std::mem::align_of::<LCTextureCopyCommand>(),
        8usize,
        concat!("Alignment of ", stringify!(LCTextureCopyCommand))
    );
    fn test_field_storage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCTextureCopyCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).storage) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCTextureCopyCommand),
                "::",
                stringify!(storage)
            )
        );
    }
    test_field_storage();
    fn test_field_src() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCTextureCopyCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(LCTextureCopyCommand),
                "::",
                stringify!(src)
            )
        );
    }
    test_field_src();
    fn test_field_dst() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCTextureCopyCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(LCTextureCopyCommand),
                "::",
                stringify!(dst)
            )
        );
    }
    test_field_dst();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCTextureCopyCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(LCTextureCopyCommand),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_src_level() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCTextureCopyCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).src_level) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(LCTextureCopyCommand),
                "::",
                stringify!(src_level)
            )
        );
    }
    test_field_src_level();
    fn test_field_dst_level() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCTextureCopyCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dst_level) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(LCTextureCopyCommand),
                "::",
                stringify!(dst_level)
            )
        );
    }
    test_field_dst_level();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCBufferArgument {
    pub buffer: LCBuffer,
    pub offset: size_t,
    pub size: size_t,
}
#[test]
fn bindgen_test_layout_LCBufferArgument() {
    assert_eq!(
        ::std::mem::size_of::<LCBufferArgument>(),
        24usize,
        concat!("Size of: ", stringify!(LCBufferArgument))
    );
    assert_eq!(
        ::std::mem::align_of::<LCBufferArgument>(),
        8usize,
        concat!("Alignment of ", stringify!(LCBufferArgument))
    );
    fn test_field_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBufferArgument>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBufferArgument),
                "::",
                stringify!(buffer)
            )
        );
    }
    test_field_buffer();
    fn test_field_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBufferArgument>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBufferArgument),
                "::",
                stringify!(offset)
            )
        );
    }
    test_field_offset();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBufferArgument>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBufferArgument),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCTextureArgument {
    pub texture: LCTexture,
    pub level: u32,
}
#[test]
fn bindgen_test_layout_LCTextureArgument() {
    assert_eq!(
        ::std::mem::size_of::<LCTextureArgument>(),
        16usize,
        concat!("Size of: ", stringify!(LCTextureArgument))
    );
    assert_eq!(
        ::std::mem::align_of::<LCTextureArgument>(),
        8usize,
        concat!("Alignment of ", stringify!(LCTextureArgument))
    );
    fn test_field_texture() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCTextureArgument>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).texture) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCTextureArgument),
                "::",
                stringify!(texture)
            )
        );
    }
    test_field_texture();
    fn test_field_level() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCTextureArgument>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(LCTextureArgument),
                "::",
                stringify!(level)
            )
        );
    }
    test_field_level();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCUniformArgument {
    pub data: *const u8,
    pub size: size_t,
}
#[test]
fn bindgen_test_layout_LCUniformArgument() {
    assert_eq!(
        ::std::mem::size_of::<LCUniformArgument>(),
        16usize,
        concat!("Size of: ", stringify!(LCUniformArgument))
    );
    assert_eq!(
        ::std::mem::align_of::<LCUniformArgument>(),
        8usize,
        concat!("Alignment of ", stringify!(LCUniformArgument))
    );
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCUniformArgument>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCUniformArgument),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCUniformArgument>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(LCUniformArgument),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCAccel {
    pub _0: u64,
}
#[test]
fn bindgen_test_layout_LCAccel() {
    assert_eq!(
        ::std::mem::size_of::<LCAccel>(),
        8usize,
        concat!("Size of: ", stringify!(LCAccel))
    );
    assert_eq!(
        ::std::mem::align_of::<LCAccel>(),
        8usize,
        concat!("Alignment of ", stringify!(LCAccel))
    );
    fn test_field__0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCAccel>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCAccel),
                "::",
                stringify!(_0)
            )
        );
    }
    test_field__0();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCBindlessArray {
    pub _0: u64,
}
#[test]
fn bindgen_test_layout_LCBindlessArray() {
    assert_eq!(
        ::std::mem::size_of::<LCBindlessArray>(),
        8usize,
        concat!("Size of: ", stringify!(LCBindlessArray))
    );
    assert_eq!(
        ::std::mem::align_of::<LCBindlessArray>(),
        8usize,
        concat!("Alignment of ", stringify!(LCBindlessArray))
    );
    fn test_field__0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBindlessArray>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBindlessArray),
                "::",
                stringify!(_0)
            )
        );
    }
    test_field__0();
}
impl LCArgument_Tag {
    pub const ARGUMENT_BUFFER: LCArgument_Tag = LCArgument_Tag(0);
}
impl LCArgument_Tag {
    pub const ARGUMENT_TEXTURE: LCArgument_Tag = LCArgument_Tag(1);
}
impl LCArgument_Tag {
    pub const ARGUMENT_UNIFORM: LCArgument_Tag = LCArgument_Tag(2);
}
impl LCArgument_Tag {
    pub const ARGUMENT_ACCEL: LCArgument_Tag = LCArgument_Tag(3);
}
impl LCArgument_Tag {
    pub const ARGUMENT_BINDLESS_ARRAY: LCArgument_Tag = LCArgument_Tag(4);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct LCArgument_Tag(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LCArgument {
    pub tag: LCArgument_Tag,
    pub __bindgen_anon_1: LCArgument__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union LCArgument__bindgen_ty_1 {
    pub __bindgen_anon_1: LCArgument__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: LCArgument__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: LCArgument__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: LCArgument__bindgen_ty_1__bindgen_ty_4,
    pub __bindgen_anon_5: LCArgument__bindgen_ty_1__bindgen_ty_5,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCArgument__bindgen_ty_1__bindgen_ty_1 {
    pub buffer: LCBufferArgument,
}
#[test]
fn bindgen_test_layout_LCArgument__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<LCArgument__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(LCArgument__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<LCArgument__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(LCArgument__bindgen_ty_1__bindgen_ty_1)
        )
    );
    fn test_field_buffer() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<LCArgument__bindgen_ty_1__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCArgument__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(buffer)
            )
        );
    }
    test_field_buffer();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCArgument__bindgen_ty_1__bindgen_ty_2 {
    pub texture: LCTextureArgument,
}
#[test]
fn bindgen_test_layout_LCArgument__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<LCArgument__bindgen_ty_1__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(LCArgument__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<LCArgument__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(LCArgument__bindgen_ty_1__bindgen_ty_2)
        )
    );
    fn test_field_texture() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<LCArgument__bindgen_ty_1__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).texture) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCArgument__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(texture)
            )
        );
    }
    test_field_texture();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCArgument__bindgen_ty_1__bindgen_ty_3 {
    pub uniform: LCUniformArgument,
}
#[test]
fn bindgen_test_layout_LCArgument__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<LCArgument__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(LCArgument__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<LCArgument__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(LCArgument__bindgen_ty_1__bindgen_ty_3)
        )
    );
    fn test_field_uniform() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<LCArgument__bindgen_ty_1__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uniform) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCArgument__bindgen_ty_1__bindgen_ty_3),
                "::",
                stringify!(uniform)
            )
        );
    }
    test_field_uniform();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCArgument__bindgen_ty_1__bindgen_ty_4 {
    pub accel: LCAccel,
}
#[test]
fn bindgen_test_layout_LCArgument__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<LCArgument__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(LCArgument__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<LCArgument__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(LCArgument__bindgen_ty_1__bindgen_ty_4)
        )
    );
    fn test_field_accel() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<LCArgument__bindgen_ty_1__bindgen_ty_4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).accel) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCArgument__bindgen_ty_1__bindgen_ty_4),
                "::",
                stringify!(accel)
            )
        );
    }
    test_field_accel();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCArgument__bindgen_ty_1__bindgen_ty_5 {
    pub bindless_array: LCBindlessArray,
}
#[test]
fn bindgen_test_layout_LCArgument__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<LCArgument__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(LCArgument__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<LCArgument__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(LCArgument__bindgen_ty_1__bindgen_ty_5)
        )
    );
    fn test_field_bindless_array() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<LCArgument__bindgen_ty_1__bindgen_ty_5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bindless_array) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCArgument__bindgen_ty_1__bindgen_ty_5),
                "::",
                stringify!(bindless_array)
            )
        );
    }
    test_field_bindless_array();
}
#[test]
fn bindgen_test_layout_LCArgument__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<LCArgument__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(LCArgument__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<LCArgument__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(LCArgument__bindgen_ty_1))
    );
}
#[test]
fn bindgen_test_layout_LCArgument() {
    assert_eq!(
        ::std::mem::size_of::<LCArgument>(),
        32usize,
        concat!("Size of: ", stringify!(LCArgument))
    );
    assert_eq!(
        ::std::mem::align_of::<LCArgument>(),
        8usize,
        concat!("Alignment of ", stringify!(LCArgument))
    );
    fn test_field_tag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCArgument>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCArgument),
                "::",
                stringify!(tag)
            )
        );
    }
    test_field_tag();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCShaderDispatchCommand {
    pub shader: LCShader,
    pub dispatch_size: [u32; 3usize],
    pub args: *const LCArgument,
    pub args_count: size_t,
}
#[test]
fn bindgen_test_layout_LCShaderDispatchCommand() {
    assert_eq!(
        ::std::mem::size_of::<LCShaderDispatchCommand>(),
        40usize,
        concat!("Size of: ", stringify!(LCShaderDispatchCommand))
    );
    assert_eq!(
        ::std::mem::align_of::<LCShaderDispatchCommand>(),
        8usize,
        concat!("Alignment of ", stringify!(LCShaderDispatchCommand))
    );
    fn test_field_shader() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCShaderDispatchCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shader) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCShaderDispatchCommand),
                "::",
                stringify!(shader)
            )
        );
    }
    test_field_shader();
    fn test_field_dispatch_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCShaderDispatchCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dispatch_size) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(LCShaderDispatchCommand),
                "::",
                stringify!(dispatch_size)
            )
        );
    }
    test_field_dispatch_size();
    fn test_field_args() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCShaderDispatchCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(LCShaderDispatchCommand),
                "::",
                stringify!(args)
            )
        );
    }
    test_field_args();
    fn test_field_args_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCShaderDispatchCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).args_count) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(LCShaderDispatchCommand),
                "::",
                stringify!(args_count)
            )
        );
    }
    test_field_args_count();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCMesh {
    pub _0: u64,
}
#[test]
fn bindgen_test_layout_LCMesh() {
    assert_eq!(
        ::std::mem::size_of::<LCMesh>(),
        8usize,
        concat!("Size of: ", stringify!(LCMesh))
    );
    assert_eq!(
        ::std::mem::align_of::<LCMesh>(),
        8usize,
        concat!("Alignment of ", stringify!(LCMesh))
    );
    fn test_field__0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCMesh>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCMesh),
                "::",
                stringify!(_0)
            )
        );
    }
    test_field__0();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCMeshBuildCommand {
    pub mesh: LCMesh,
    pub request: LCAccelBuildRequest,
    pub vertex_buffer: LCBuffer,
    pub vertex_buffer_offset: size_t,
    pub vertex_buffer_size: size_t,
    pub vertex_stride: size_t,
    pub index_buffer: LCBuffer,
    pub index_buffer_offset: size_t,
    pub index_buffer_size: size_t,
    pub index_stride: size_t,
}
#[test]
fn bindgen_test_layout_LCMeshBuildCommand() {
    assert_eq!(
        ::std::mem::size_of::<LCMeshBuildCommand>(),
        80usize,
        concat!("Size of: ", stringify!(LCMeshBuildCommand))
    );
    assert_eq!(
        ::std::mem::align_of::<LCMeshBuildCommand>(),
        8usize,
        concat!("Alignment of ", stringify!(LCMeshBuildCommand))
    );
    fn test_field_mesh() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCMeshBuildCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mesh) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCMeshBuildCommand),
                "::",
                stringify!(mesh)
            )
        );
    }
    test_field_mesh();
    fn test_field_request() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCMeshBuildCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).request) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(LCMeshBuildCommand),
                "::",
                stringify!(request)
            )
        );
    }
    test_field_request();
    fn test_field_vertex_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCMeshBuildCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vertex_buffer) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(LCMeshBuildCommand),
                "::",
                stringify!(vertex_buffer)
            )
        );
    }
    test_field_vertex_buffer();
    fn test_field_vertex_buffer_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCMeshBuildCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vertex_buffer_offset) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(LCMeshBuildCommand),
                "::",
                stringify!(vertex_buffer_offset)
            )
        );
    }
    test_field_vertex_buffer_offset();
    fn test_field_vertex_buffer_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCMeshBuildCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vertex_buffer_size) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(LCMeshBuildCommand),
                "::",
                stringify!(vertex_buffer_size)
            )
        );
    }
    test_field_vertex_buffer_size();
    fn test_field_vertex_stride() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCMeshBuildCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vertex_stride) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(LCMeshBuildCommand),
                "::",
                stringify!(vertex_stride)
            )
        );
    }
    test_field_vertex_stride();
    fn test_field_index_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCMeshBuildCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).index_buffer) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(LCMeshBuildCommand),
                "::",
                stringify!(index_buffer)
            )
        );
    }
    test_field_index_buffer();
    fn test_field_index_buffer_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCMeshBuildCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).index_buffer_offset) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(LCMeshBuildCommand),
                "::",
                stringify!(index_buffer_offset)
            )
        );
    }
    test_field_index_buffer_offset();
    fn test_field_index_buffer_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCMeshBuildCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).index_buffer_size) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(LCMeshBuildCommand),
                "::",
                stringify!(index_buffer_size)
            )
        );
    }
    test_field_index_buffer_size();
    fn test_field_index_stride() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCMeshBuildCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).index_stride) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(LCMeshBuildCommand),
                "::",
                stringify!(index_stride)
            )
        );
    }
    test_field_index_stride();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCProceduralPrimitive {
    pub _0: u64,
}
#[test]
fn bindgen_test_layout_LCProceduralPrimitive() {
    assert_eq!(
        ::std::mem::size_of::<LCProceduralPrimitive>(),
        8usize,
        concat!("Size of: ", stringify!(LCProceduralPrimitive))
    );
    assert_eq!(
        ::std::mem::align_of::<LCProceduralPrimitive>(),
        8usize,
        concat!("Alignment of ", stringify!(LCProceduralPrimitive))
    );
    fn test_field__0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCProceduralPrimitive>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCProceduralPrimitive),
                "::",
                stringify!(_0)
            )
        );
    }
    test_field__0();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCProceduralPrimitiveBuildCommand {
    pub handle: LCProceduralPrimitive,
    pub request: LCAccelBuildRequest,
    pub aabb_buffer: LCBuffer,
    pub aabb_ffset: size_t,
    pub aabb_count: size_t,
}
#[test]
fn bindgen_test_layout_LCProceduralPrimitiveBuildCommand() {
    assert_eq!(
        ::std::mem::size_of::<LCProceduralPrimitiveBuildCommand>(),
        40usize,
        concat!("Size of: ", stringify!(LCProceduralPrimitiveBuildCommand))
    );
    assert_eq!(
        ::std::mem::align_of::<LCProceduralPrimitiveBuildCommand>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(LCProceduralPrimitiveBuildCommand)
        )
    );
    fn test_field_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCProceduralPrimitiveBuildCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCProceduralPrimitiveBuildCommand),
                "::",
                stringify!(handle)
            )
        );
    }
    test_field_handle();
    fn test_field_request() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCProceduralPrimitiveBuildCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).request) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(LCProceduralPrimitiveBuildCommand),
                "::",
                stringify!(request)
            )
        );
    }
    test_field_request();
    fn test_field_aabb_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCProceduralPrimitiveBuildCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).aabb_buffer) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(LCProceduralPrimitiveBuildCommand),
                "::",
                stringify!(aabb_buffer)
            )
        );
    }
    test_field_aabb_buffer();
    fn test_field_aabb_ffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCProceduralPrimitiveBuildCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).aabb_ffset) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(LCProceduralPrimitiveBuildCommand),
                "::",
                stringify!(aabb_ffset)
            )
        );
    }
    test_field_aabb_ffset();
    fn test_field_aabb_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCProceduralPrimitiveBuildCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).aabb_count) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(LCProceduralPrimitiveBuildCommand),
                "::",
                stringify!(aabb_count)
            )
        );
    }
    test_field_aabb_count();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCAccelBuildCommand {
    pub accel: LCAccel,
    pub request: LCAccelBuildRequest,
    pub instance_count: u32,
    pub modifications: *const LCAccelBuildModification,
    pub modifications_count: size_t,
    pub build_accel: bool,
}
#[test]
fn bindgen_test_layout_LCAccelBuildCommand() {
    assert_eq!(
        ::std::mem::size_of::<LCAccelBuildCommand>(),
        40usize,
        concat!("Size of: ", stringify!(LCAccelBuildCommand))
    );
    assert_eq!(
        ::std::mem::align_of::<LCAccelBuildCommand>(),
        8usize,
        concat!("Alignment of ", stringify!(LCAccelBuildCommand))
    );
    fn test_field_accel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCAccelBuildCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).accel) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCAccelBuildCommand),
                "::",
                stringify!(accel)
            )
        );
    }
    test_field_accel();
    fn test_field_request() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCAccelBuildCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).request) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(LCAccelBuildCommand),
                "::",
                stringify!(request)
            )
        );
    }
    test_field_request();
    fn test_field_instance_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCAccelBuildCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).instance_count) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(LCAccelBuildCommand),
                "::",
                stringify!(instance_count)
            )
        );
    }
    test_field_instance_count();
    fn test_field_modifications() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCAccelBuildCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).modifications) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(LCAccelBuildCommand),
                "::",
                stringify!(modifications)
            )
        );
    }
    test_field_modifications();
    fn test_field_modifications_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCAccelBuildCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).modifications_count) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(LCAccelBuildCommand),
                "::",
                stringify!(modifications_count)
            )
        );
    }
    test_field_modifications_count();
    fn test_field_build_accel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCAccelBuildCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).build_accel) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(LCAccelBuildCommand),
                "::",
                stringify!(build_accel)
            )
        );
    }
    test_field_build_accel();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCBindlessArrayUpdateBuffer {
    pub op: LCBindlessArrayUpdateOperation,
    pub handle: LCBuffer,
    pub offset: size_t,
}
#[test]
fn bindgen_test_layout_LCBindlessArrayUpdateBuffer() {
    assert_eq!(
        ::std::mem::size_of::<LCBindlessArrayUpdateBuffer>(),
        24usize,
        concat!("Size of: ", stringify!(LCBindlessArrayUpdateBuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<LCBindlessArrayUpdateBuffer>(),
        8usize,
        concat!("Alignment of ", stringify!(LCBindlessArrayUpdateBuffer))
    );
    fn test_field_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBindlessArrayUpdateBuffer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBindlessArrayUpdateBuffer),
                "::",
                stringify!(op)
            )
        );
    }
    test_field_op();
    fn test_field_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBindlessArrayUpdateBuffer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBindlessArrayUpdateBuffer),
                "::",
                stringify!(handle)
            )
        );
    }
    test_field_handle();
    fn test_field_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBindlessArrayUpdateBuffer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBindlessArrayUpdateBuffer),
                "::",
                stringify!(offset)
            )
        );
    }
    test_field_offset();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCBindlessArrayUpdateTexture {
    pub op: LCBindlessArrayUpdateOperation,
    pub handle: LCTexture,
    pub sampler: LCSampler,
}
#[test]
fn bindgen_test_layout_LCBindlessArrayUpdateTexture() {
    assert_eq!(
        ::std::mem::size_of::<LCBindlessArrayUpdateTexture>(),
        24usize,
        concat!("Size of: ", stringify!(LCBindlessArrayUpdateTexture))
    );
    assert_eq!(
        ::std::mem::align_of::<LCBindlessArrayUpdateTexture>(),
        8usize,
        concat!("Alignment of ", stringify!(LCBindlessArrayUpdateTexture))
    );
    fn test_field_op() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBindlessArrayUpdateTexture>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBindlessArrayUpdateTexture),
                "::",
                stringify!(op)
            )
        );
    }
    test_field_op();
    fn test_field_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBindlessArrayUpdateTexture>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBindlessArrayUpdateTexture),
                "::",
                stringify!(handle)
            )
        );
    }
    test_field_handle();
    fn test_field_sampler() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBindlessArrayUpdateTexture>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sampler) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBindlessArrayUpdateTexture),
                "::",
                stringify!(sampler)
            )
        );
    }
    test_field_sampler();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCBindlessArrayUpdateModification {
    pub slot: size_t,
    pub buffer: LCBindlessArrayUpdateBuffer,
    pub tex2d: LCBindlessArrayUpdateTexture,
    pub tex3d: LCBindlessArrayUpdateTexture,
}
#[test]
fn bindgen_test_layout_LCBindlessArrayUpdateModification() {
    assert_eq!(
        ::std::mem::size_of::<LCBindlessArrayUpdateModification>(),
        80usize,
        concat!("Size of: ", stringify!(LCBindlessArrayUpdateModification))
    );
    assert_eq!(
        ::std::mem::align_of::<LCBindlessArrayUpdateModification>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(LCBindlessArrayUpdateModification)
        )
    );
    fn test_field_slot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBindlessArrayUpdateModification>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).slot) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBindlessArrayUpdateModification),
                "::",
                stringify!(slot)
            )
        );
    }
    test_field_slot();
    fn test_field_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBindlessArrayUpdateModification>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBindlessArrayUpdateModification),
                "::",
                stringify!(buffer)
            )
        );
    }
    test_field_buffer();
    fn test_field_tex2d() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBindlessArrayUpdateModification>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tex2d) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBindlessArrayUpdateModification),
                "::",
                stringify!(tex2d)
            )
        );
    }
    test_field_tex2d();
    fn test_field_tex3d() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBindlessArrayUpdateModification>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tex3d) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBindlessArrayUpdateModification),
                "::",
                stringify!(tex3d)
            )
        );
    }
    test_field_tex3d();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCBindlessArrayUpdateCommand {
    pub handle: LCBindlessArray,
    pub modifications: *const LCBindlessArrayUpdateModification,
    pub modifications_count: size_t,
}
#[test]
fn bindgen_test_layout_LCBindlessArrayUpdateCommand() {
    assert_eq!(
        ::std::mem::size_of::<LCBindlessArrayUpdateCommand>(),
        24usize,
        concat!("Size of: ", stringify!(LCBindlessArrayUpdateCommand))
    );
    assert_eq!(
        ::std::mem::align_of::<LCBindlessArrayUpdateCommand>(),
        8usize,
        concat!("Alignment of ", stringify!(LCBindlessArrayUpdateCommand))
    );
    fn test_field_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBindlessArrayUpdateCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBindlessArrayUpdateCommand),
                "::",
                stringify!(handle)
            )
        );
    }
    test_field_handle();
    fn test_field_modifications() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBindlessArrayUpdateCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).modifications) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBindlessArrayUpdateCommand),
                "::",
                stringify!(modifications)
            )
        );
    }
    test_field_modifications();
    fn test_field_modifications_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCBindlessArrayUpdateCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).modifications_count) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(LCBindlessArrayUpdateCommand),
                "::",
                stringify!(modifications_count)
            )
        );
    }
    test_field_modifications_count();
}
impl LCCommand_Tag {
    pub const COMMAND_BUFFER_UPLOAD: LCCommand_Tag = LCCommand_Tag(0);
}
impl LCCommand_Tag {
    pub const COMMAND_BUFFER_DOWNLOAD: LCCommand_Tag = LCCommand_Tag(1);
}
impl LCCommand_Tag {
    pub const COMMAND_BUFFER_COPY: LCCommand_Tag = LCCommand_Tag(2);
}
impl LCCommand_Tag {
    pub const COMMAND_BUFFER_TO_TEXTURE_COPY: LCCommand_Tag = LCCommand_Tag(3);
}
impl LCCommand_Tag {
    pub const COMMAND_TEXTURE_TO_BUFFER_COPY: LCCommand_Tag = LCCommand_Tag(4);
}
impl LCCommand_Tag {
    pub const COMMAND_TEXTURE_UPLOAD: LCCommand_Tag = LCCommand_Tag(5);
}
impl LCCommand_Tag {
    pub const COMMAND_TEXTURE_DOWNLOAD: LCCommand_Tag = LCCommand_Tag(6);
}
impl LCCommand_Tag {
    pub const COMMAND_TEXTURE_COPY: LCCommand_Tag = LCCommand_Tag(7);
}
impl LCCommand_Tag {
    pub const COMMAND_SHADER_DISPATCH: LCCommand_Tag = LCCommand_Tag(8);
}
impl LCCommand_Tag {
    pub const COMMAND_MESH_BUILD: LCCommand_Tag = LCCommand_Tag(9);
}
impl LCCommand_Tag {
    pub const COMMAND_PROCEDURAL_PRIMITIVE_BUILD: LCCommand_Tag = LCCommand_Tag(10);
}
impl LCCommand_Tag {
    pub const COMMAND_ACCEL_BUILD: LCCommand_Tag = LCCommand_Tag(11);
}
impl LCCommand_Tag {
    pub const COMMAND_BINDLESS_ARRAY_UPDATE: LCCommand_Tag = LCCommand_Tag(12);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct LCCommand_Tag(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LCCommand {
    pub tag: LCCommand_Tag,
    pub __bindgen_anon_1: LCCommand__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union LCCommand__bindgen_ty_1 {
    pub __bindgen_anon_1: LCCommand__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: LCCommand__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: LCCommand__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: LCCommand__bindgen_ty_1__bindgen_ty_4,
    pub __bindgen_anon_5: LCCommand__bindgen_ty_1__bindgen_ty_5,
    pub __bindgen_anon_6: LCCommand__bindgen_ty_1__bindgen_ty_6,
    pub __bindgen_anon_7: LCCommand__bindgen_ty_1__bindgen_ty_7,
    pub __bindgen_anon_8: LCCommand__bindgen_ty_1__bindgen_ty_8,
    pub __bindgen_anon_9: LCCommand__bindgen_ty_1__bindgen_ty_9,
    pub __bindgen_anon_10: LCCommand__bindgen_ty_1__bindgen_ty_10,
    pub __bindgen_anon_11: LCCommand__bindgen_ty_1__bindgen_ty_11,
    pub __bindgen_anon_12: LCCommand__bindgen_ty_1__bindgen_ty_12,
    pub __bindgen_anon_13: LCCommand__bindgen_ty_1__bindgen_ty_13,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCCommand__bindgen_ty_1__bindgen_ty_1 {
    pub buffer_upload: LCBufferUploadCommand,
}
#[test]
fn bindgen_test_layout_LCCommand__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<LCCommand__bindgen_ty_1__bindgen_ty_1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(LCCommand__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<LCCommand__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(LCCommand__bindgen_ty_1__bindgen_ty_1)
        )
    );
    fn test_field_buffer_upload() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<LCCommand__bindgen_ty_1__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer_upload) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCCommand__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(buffer_upload)
            )
        );
    }
    test_field_buffer_upload();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCCommand__bindgen_ty_1__bindgen_ty_2 {
    pub buffer_download: LCBufferDownloadCommand,
}
#[test]
fn bindgen_test_layout_LCCommand__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<LCCommand__bindgen_ty_1__bindgen_ty_2>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(LCCommand__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<LCCommand__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(LCCommand__bindgen_ty_1__bindgen_ty_2)
        )
    );
    fn test_field_buffer_download() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<LCCommand__bindgen_ty_1__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer_download) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCCommand__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(buffer_download)
            )
        );
    }
    test_field_buffer_download();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCCommand__bindgen_ty_1__bindgen_ty_3 {
    pub buffer_copy: LCBufferCopyCommand,
}
#[test]
fn bindgen_test_layout_LCCommand__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<LCCommand__bindgen_ty_1__bindgen_ty_3>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(LCCommand__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<LCCommand__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(LCCommand__bindgen_ty_1__bindgen_ty_3)
        )
    );
    fn test_field_buffer_copy() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<LCCommand__bindgen_ty_1__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer_copy) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCCommand__bindgen_ty_1__bindgen_ty_3),
                "::",
                stringify!(buffer_copy)
            )
        );
    }
    test_field_buffer_copy();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCCommand__bindgen_ty_1__bindgen_ty_4 {
    pub buffer_to_texture_copy: LCBufferToTextureCopyCommand,
}
#[test]
fn bindgen_test_layout_LCCommand__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<LCCommand__bindgen_ty_1__bindgen_ty_4>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(LCCommand__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<LCCommand__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(LCCommand__bindgen_ty_1__bindgen_ty_4)
        )
    );
    fn test_field_buffer_to_texture_copy() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<LCCommand__bindgen_ty_1__bindgen_ty_4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer_to_texture_copy) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCCommand__bindgen_ty_1__bindgen_ty_4),
                "::",
                stringify!(buffer_to_texture_copy)
            )
        );
    }
    test_field_buffer_to_texture_copy();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCCommand__bindgen_ty_1__bindgen_ty_5 {
    pub texture_to_buffer_copy: LCTextureToBufferCopyCommand,
}
#[test]
fn bindgen_test_layout_LCCommand__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<LCCommand__bindgen_ty_1__bindgen_ty_5>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(LCCommand__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<LCCommand__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(LCCommand__bindgen_ty_1__bindgen_ty_5)
        )
    );
    fn test_field_texture_to_buffer_copy() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<LCCommand__bindgen_ty_1__bindgen_ty_5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).texture_to_buffer_copy) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCCommand__bindgen_ty_1__bindgen_ty_5),
                "::",
                stringify!(texture_to_buffer_copy)
            )
        );
    }
    test_field_texture_to_buffer_copy();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCCommand__bindgen_ty_1__bindgen_ty_6 {
    pub texture_upload: LCTextureUploadCommand,
}
#[test]
fn bindgen_test_layout_LCCommand__bindgen_ty_1__bindgen_ty_6() {
    assert_eq!(
        ::std::mem::size_of::<LCCommand__bindgen_ty_1__bindgen_ty_6>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(LCCommand__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<LCCommand__bindgen_ty_1__bindgen_ty_6>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(LCCommand__bindgen_ty_1__bindgen_ty_6)
        )
    );
    fn test_field_texture_upload() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<LCCommand__bindgen_ty_1__bindgen_ty_6>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).texture_upload) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCCommand__bindgen_ty_1__bindgen_ty_6),
                "::",
                stringify!(texture_upload)
            )
        );
    }
    test_field_texture_upload();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCCommand__bindgen_ty_1__bindgen_ty_7 {
    pub texture_download: LCTextureDownloadCommand,
}
#[test]
fn bindgen_test_layout_LCCommand__bindgen_ty_1__bindgen_ty_7() {
    assert_eq!(
        ::std::mem::size_of::<LCCommand__bindgen_ty_1__bindgen_ty_7>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(LCCommand__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<LCCommand__bindgen_ty_1__bindgen_ty_7>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(LCCommand__bindgen_ty_1__bindgen_ty_7)
        )
    );
    fn test_field_texture_download() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<LCCommand__bindgen_ty_1__bindgen_ty_7>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).texture_download) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCCommand__bindgen_ty_1__bindgen_ty_7),
                "::",
                stringify!(texture_download)
            )
        );
    }
    test_field_texture_download();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCCommand__bindgen_ty_1__bindgen_ty_8 {
    pub texture_copy: LCTextureCopyCommand,
}
#[test]
fn bindgen_test_layout_LCCommand__bindgen_ty_1__bindgen_ty_8() {
    assert_eq!(
        ::std::mem::size_of::<LCCommand__bindgen_ty_1__bindgen_ty_8>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(LCCommand__bindgen_ty_1__bindgen_ty_8)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<LCCommand__bindgen_ty_1__bindgen_ty_8>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(LCCommand__bindgen_ty_1__bindgen_ty_8)
        )
    );
    fn test_field_texture_copy() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<LCCommand__bindgen_ty_1__bindgen_ty_8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).texture_copy) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCCommand__bindgen_ty_1__bindgen_ty_8),
                "::",
                stringify!(texture_copy)
            )
        );
    }
    test_field_texture_copy();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCCommand__bindgen_ty_1__bindgen_ty_9 {
    pub shader_dispatch: LCShaderDispatchCommand,
}
#[test]
fn bindgen_test_layout_LCCommand__bindgen_ty_1__bindgen_ty_9() {
    assert_eq!(
        ::std::mem::size_of::<LCCommand__bindgen_ty_1__bindgen_ty_9>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(LCCommand__bindgen_ty_1__bindgen_ty_9)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<LCCommand__bindgen_ty_1__bindgen_ty_9>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(LCCommand__bindgen_ty_1__bindgen_ty_9)
        )
    );
    fn test_field_shader_dispatch() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<LCCommand__bindgen_ty_1__bindgen_ty_9>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shader_dispatch) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCCommand__bindgen_ty_1__bindgen_ty_9),
                "::",
                stringify!(shader_dispatch)
            )
        );
    }
    test_field_shader_dispatch();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCCommand__bindgen_ty_1__bindgen_ty_10 {
    pub mesh_build: LCMeshBuildCommand,
}
#[test]
fn bindgen_test_layout_LCCommand__bindgen_ty_1__bindgen_ty_10() {
    assert_eq!(
        ::std::mem::size_of::<LCCommand__bindgen_ty_1__bindgen_ty_10>(),
        80usize,
        concat!(
            "Size of: ",
            stringify!(LCCommand__bindgen_ty_1__bindgen_ty_10)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<LCCommand__bindgen_ty_1__bindgen_ty_10>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(LCCommand__bindgen_ty_1__bindgen_ty_10)
        )
    );
    fn test_field_mesh_build() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<LCCommand__bindgen_ty_1__bindgen_ty_10>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mesh_build) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCCommand__bindgen_ty_1__bindgen_ty_10),
                "::",
                stringify!(mesh_build)
            )
        );
    }
    test_field_mesh_build();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCCommand__bindgen_ty_1__bindgen_ty_11 {
    pub procedural_primitive_build: LCProceduralPrimitiveBuildCommand,
}
#[test]
fn bindgen_test_layout_LCCommand__bindgen_ty_1__bindgen_ty_11() {
    assert_eq!(
        ::std::mem::size_of::<LCCommand__bindgen_ty_1__bindgen_ty_11>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(LCCommand__bindgen_ty_1__bindgen_ty_11)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<LCCommand__bindgen_ty_1__bindgen_ty_11>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(LCCommand__bindgen_ty_1__bindgen_ty_11)
        )
    );
    fn test_field_procedural_primitive_build() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<LCCommand__bindgen_ty_1__bindgen_ty_11>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).procedural_primitive_build) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCCommand__bindgen_ty_1__bindgen_ty_11),
                "::",
                stringify!(procedural_primitive_build)
            )
        );
    }
    test_field_procedural_primitive_build();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCCommand__bindgen_ty_1__bindgen_ty_12 {
    pub accel_build: LCAccelBuildCommand,
}
#[test]
fn bindgen_test_layout_LCCommand__bindgen_ty_1__bindgen_ty_12() {
    assert_eq!(
        ::std::mem::size_of::<LCCommand__bindgen_ty_1__bindgen_ty_12>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(LCCommand__bindgen_ty_1__bindgen_ty_12)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<LCCommand__bindgen_ty_1__bindgen_ty_12>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(LCCommand__bindgen_ty_1__bindgen_ty_12)
        )
    );
    fn test_field_accel_build() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<LCCommand__bindgen_ty_1__bindgen_ty_12>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).accel_build) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCCommand__bindgen_ty_1__bindgen_ty_12),
                "::",
                stringify!(accel_build)
            )
        );
    }
    test_field_accel_build();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCCommand__bindgen_ty_1__bindgen_ty_13 {
    pub bindless_array_update: LCBindlessArrayUpdateCommand,
}
#[test]
fn bindgen_test_layout_LCCommand__bindgen_ty_1__bindgen_ty_13() {
    assert_eq!(
        ::std::mem::size_of::<LCCommand__bindgen_ty_1__bindgen_ty_13>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(LCCommand__bindgen_ty_1__bindgen_ty_13)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<LCCommand__bindgen_ty_1__bindgen_ty_13>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(LCCommand__bindgen_ty_1__bindgen_ty_13)
        )
    );
    fn test_field_bindless_array_update() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<LCCommand__bindgen_ty_1__bindgen_ty_13>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bindless_array_update) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCCommand__bindgen_ty_1__bindgen_ty_13),
                "::",
                stringify!(bindless_array_update)
            )
        );
    }
    test_field_bindless_array_update();
}
#[test]
fn bindgen_test_layout_LCCommand__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<LCCommand__bindgen_ty_1>(),
        80usize,
        concat!("Size of: ", stringify!(LCCommand__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<LCCommand__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(LCCommand__bindgen_ty_1))
    );
}
#[test]
fn bindgen_test_layout_LCCommand() {
    assert_eq!(
        ::std::mem::size_of::<LCCommand>(),
        88usize,
        concat!("Size of: ", stringify!(LCCommand))
    );
    assert_eq!(
        ::std::mem::align_of::<LCCommand>(),
        8usize,
        concat!("Alignment of ", stringify!(LCCommand))
    );
    fn test_field_tag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCCommand>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCCommand),
                "::",
                stringify!(tag)
            )
        );
    }
    test_field_tag();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCCommandList {
    pub commands: *const LCCommand,
    pub commands_count: size_t,
}
#[test]
fn bindgen_test_layout_LCCommandList() {
    assert_eq!(
        ::std::mem::size_of::<LCCommandList>(),
        16usize,
        concat!("Size of: ", stringify!(LCCommandList))
    );
    assert_eq!(
        ::std::mem::align_of::<LCCommandList>(),
        8usize,
        concat!("Alignment of ", stringify!(LCCommandList))
    );
    fn test_field_commands() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCCommandList>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).commands) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCCommandList),
                "::",
                stringify!(commands)
            )
        );
    }
    test_field_commands();
    fn test_field_commands_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCCommandList>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).commands_count) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(LCCommandList),
                "::",
                stringify!(commands_count)
            )
        );
    }
    test_field_commands_count();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCAppContext {
    pub gc_context: *mut ::std::os::raw::c_void,
    pub ir_context: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_LCAppContext() {
    assert_eq!(
        ::std::mem::size_of::<LCAppContext>(),
        16usize,
        concat!("Size of: ", stringify!(LCAppContext))
    );
    assert_eq!(
        ::std::mem::align_of::<LCAppContext>(),
        8usize,
        concat!("Alignment of ", stringify!(LCAppContext))
    );
    fn test_field_gc_context() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCAppContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gc_context) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCAppContext),
                "::",
                stringify!(gc_context)
            )
        );
    }
    test_field_gc_context();
    fn test_field_ir_context() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCAppContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ir_context) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(LCAppContext),
                "::",
                stringify!(ir_context)
            )
        );
    }
    test_field_ir_context();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCKernelModule {
    pub ptr: u64,
}
#[test]
fn bindgen_test_layout_LCKernelModule() {
    assert_eq!(
        ::std::mem::size_of::<LCKernelModule>(),
        8usize,
        concat!("Size of: ", stringify!(LCKernelModule))
    );
    assert_eq!(
        ::std::mem::align_of::<LCKernelModule>(),
        8usize,
        concat!("Alignment of ", stringify!(LCKernelModule))
    );
    fn test_field_ptr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCKernelModule>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCKernelModule),
                "::",
                stringify!(ptr)
            )
        );
    }
    test_field_ptr();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCDeviceInterface {
    pub ctx: LCContext,
    pub data: *mut ::std::os::raw::c_void,
    pub dtor: ::std::option::Option<unsafe extern "C" fn(self_: *mut LCDeviceInterface)>,
    pub create_buffer: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut LCDeviceInterface, size_bytes: size_t) -> u64,
    >,
    pub destroy_buffer:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut LCDeviceInterface, handle: u64)>,
    pub buffer_native_handle: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut LCDeviceInterface,
            handle: u64,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub create_texture: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut LCDeviceInterface,
            format: LCPixelFormat,
            dimension: u32,
            width: u32,
            height: u32,
            depth: u32,
            mipmap_levels: u32,
        ) -> u64,
    >,
    pub destroy_texture:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut LCDeviceInterface, handle: u64)>,
    pub texture_native_handle: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut LCDeviceInterface,
            handle: u64,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub create_bindless_array: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut LCDeviceInterface, size: size_t) -> u64,
    >,
    pub destroy_bindless_array:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut LCDeviceInterface, handle: u64)>,
    pub emplace_buffer_in_bindless_array: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut LCDeviceInterface,
            array: u64,
            index: size_t,
            handle: u64,
            offset_bytes: size_t,
        ),
    >,
    pub emplace_tex2d_in_bindless_array: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut LCDeviceInterface,
            array: u64,
            index: size_t,
            handle: u64,
            sampler: LCSampler,
        ),
    >,
    pub emplace_tex3d_in_bindless_array: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut LCDeviceInterface,
            array: u64,
            index: size_t,
            handle: u64,
            sampler: LCSampler,
        ),
    >,
    pub is_resource_in_bindless_array: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut LCDeviceInterface, array: u64, handle: u64) -> bool,
    >,
    pub remove_buffer_in_bindless_array: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut LCDeviceInterface, array: u64, index: size_t),
    >,
    pub remove_tex2d_in_bindless_array: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut LCDeviceInterface, array: u64, index: size_t),
    >,
    pub remove_tex3d_in_bindless_array: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut LCDeviceInterface, array: u64, index: size_t),
    >,
    pub create_stream: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut LCDeviceInterface, for_present: bool) -> u64,
    >,
    pub destroy_stream:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut LCDeviceInterface, handle: u64)>,
    pub synchronize_stream: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut LCDeviceInterface, stream_handle: u64),
    >,
    pub dispatch: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut LCDeviceInterface,
            stream_handle: u64,
            list: LCCommandList,
        ),
    >,
    pub stream_native_handle: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut LCDeviceInterface,
            handle: u64,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub create_swap_chain: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut LCDeviceInterface,
            window_handle: u64,
            stream_handle: u64,
            width: u32,
            height: u32,
            allow_hdr: bool,
            back_buffer_size: u32,
        ) -> u64,
    >,
    pub destroy_swap_chain:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut LCDeviceInterface, handle: u64)>,
    pub swap_chain_pixel_storage: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut LCDeviceInterface, handle: u64) -> LCPixelStorage,
    >,
    pub present_display_in_stream: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut LCDeviceInterface,
            stream_handle: u64,
            swapchain_handle: u64,
            image_handle: u64,
        ),
    >,
    pub create_shader_ex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut LCDeviceInterface,
            kernel: LCKernelModule,
            meta_options: *const ::std::os::raw::c_char,
        ) -> u64,
    >,
    pub destroy_shader:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut LCDeviceInterface, handle: u64)>,
    pub create_event:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut LCDeviceInterface) -> u64>,
    pub destroy_event:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut LCDeviceInterface, handle: u64)>,
    pub signal_event: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut LCDeviceInterface, handle: u64, stream_handle: u64),
    >,
    pub wait_event: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut LCDeviceInterface, handle: u64, stream_handle: u64),
    >,
    pub synchronize_event:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut LCDeviceInterface, handle: u64)>,
    pub create_mesh: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut LCDeviceInterface,
            v_buffer: u64,
            v_offset: size_t,
            v_stride: size_t,
            v_count: size_t,
            t_buffer: u64,
            t_offset: size_t,
            t_count: size_t,
            hint: LCAccelUsageHint,
        ) -> u64,
    >,
    pub destroy_mesh:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut LCDeviceInterface, handle: u64)>,
    pub create_accel: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut LCDeviceInterface, hint: LCAccelUsageHint) -> u64,
    >,
    pub destroy_accel:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut LCDeviceInterface, handle: u64)>,
    pub query: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut LCDeviceInterface,
            meta_expr: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub requires_command_reordering:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut LCDeviceInterface) -> bool>,
}
#[test]
fn bindgen_test_layout_LCDeviceInterface() {
    assert_eq!(
        ::std::mem::size_of::<LCDeviceInterface>(),
        320usize,
        concat!("Size of: ", stringify!(LCDeviceInterface))
    );
    assert_eq!(
        ::std::mem::align_of::<LCDeviceInterface>(),
        8usize,
        concat!("Alignment of ", stringify!(LCDeviceInterface))
    );
    fn test_field_ctx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(ctx)
            )
        );
    }
    test_field_ctx();
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
    fn test_field_dtor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dtor) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(dtor)
            )
        );
    }
    test_field_dtor();
    fn test_field_create_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).create_buffer) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(create_buffer)
            )
        );
    }
    test_field_create_buffer();
    fn test_field_destroy_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).destroy_buffer) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(destroy_buffer)
            )
        );
    }
    test_field_destroy_buffer();
    fn test_field_buffer_native_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer_native_handle) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(buffer_native_handle)
            )
        );
    }
    test_field_buffer_native_handle();
    fn test_field_create_texture() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).create_texture) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(create_texture)
            )
        );
    }
    test_field_create_texture();
    fn test_field_destroy_texture() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).destroy_texture) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(destroy_texture)
            )
        );
    }
    test_field_destroy_texture();
    fn test_field_texture_native_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).texture_native_handle) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(texture_native_handle)
            )
        );
    }
    test_field_texture_native_handle();
    fn test_field_create_bindless_array() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).create_bindless_array) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(create_bindless_array)
            )
        );
    }
    test_field_create_bindless_array();
    fn test_field_destroy_bindless_array() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).destroy_bindless_array) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(destroy_bindless_array)
            )
        );
    }
    test_field_destroy_bindless_array();
    fn test_field_emplace_buffer_in_bindless_array() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).emplace_buffer_in_bindless_array) as usize
                    - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(emplace_buffer_in_bindless_array)
            )
        );
    }
    test_field_emplace_buffer_in_bindless_array();
    fn test_field_emplace_tex2d_in_bindless_array() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).emplace_tex2d_in_bindless_array) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(emplace_tex2d_in_bindless_array)
            )
        );
    }
    test_field_emplace_tex2d_in_bindless_array();
    fn test_field_emplace_tex3d_in_bindless_array() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).emplace_tex3d_in_bindless_array) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(emplace_tex3d_in_bindless_array)
            )
        );
    }
    test_field_emplace_tex3d_in_bindless_array();
    fn test_field_is_resource_in_bindless_array() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).is_resource_in_bindless_array) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(is_resource_in_bindless_array)
            )
        );
    }
    test_field_is_resource_in_bindless_array();
    fn test_field_remove_buffer_in_bindless_array() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).remove_buffer_in_bindless_array) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(remove_buffer_in_bindless_array)
            )
        );
    }
    test_field_remove_buffer_in_bindless_array();
    fn test_field_remove_tex2d_in_bindless_array() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).remove_tex2d_in_bindless_array) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(remove_tex2d_in_bindless_array)
            )
        );
    }
    test_field_remove_tex2d_in_bindless_array();
    fn test_field_remove_tex3d_in_bindless_array() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).remove_tex3d_in_bindless_array) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(remove_tex3d_in_bindless_array)
            )
        );
    }
    test_field_remove_tex3d_in_bindless_array();
    fn test_field_create_stream() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).create_stream) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(create_stream)
            )
        );
    }
    test_field_create_stream();
    fn test_field_destroy_stream() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).destroy_stream) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(destroy_stream)
            )
        );
    }
    test_field_destroy_stream();
    fn test_field_synchronize_stream() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).synchronize_stream) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(synchronize_stream)
            )
        );
    }
    test_field_synchronize_stream();
    fn test_field_dispatch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dispatch) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(dispatch)
            )
        );
    }
    test_field_dispatch();
    fn test_field_stream_native_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stream_native_handle) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(stream_native_handle)
            )
        );
    }
    test_field_stream_native_handle();
    fn test_field_create_swap_chain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).create_swap_chain) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(create_swap_chain)
            )
        );
    }
    test_field_create_swap_chain();
    fn test_field_destroy_swap_chain() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).destroy_swap_chain) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(destroy_swap_chain)
            )
        );
    }
    test_field_destroy_swap_chain();
    fn test_field_swap_chain_pixel_storage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).swap_chain_pixel_storage) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(swap_chain_pixel_storage)
            )
        );
    }
    test_field_swap_chain_pixel_storage();
    fn test_field_present_display_in_stream() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).present_display_in_stream) as usize - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(present_display_in_stream)
            )
        );
    }
    test_field_present_display_in_stream();
    fn test_field_create_shader_ex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).create_shader_ex) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(create_shader_ex)
            )
        );
    }
    test_field_create_shader_ex();
    fn test_field_destroy_shader() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).destroy_shader) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(destroy_shader)
            )
        );
    }
    test_field_destroy_shader();
    fn test_field_create_event() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).create_event) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(create_event)
            )
        );
    }
    test_field_create_event();
    fn test_field_destroy_event() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).destroy_event) as usize - ptr as usize
            },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(destroy_event)
            )
        );
    }
    test_field_destroy_event();
    fn test_field_signal_event() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).signal_event) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(signal_event)
            )
        );
    }
    test_field_signal_event();
    fn test_field_wait_event() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).wait_event) as usize - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(wait_event)
            )
        );
    }
    test_field_wait_event();
    fn test_field_synchronize_event() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).synchronize_event) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(synchronize_event)
            )
        );
    }
    test_field_synchronize_event();
    fn test_field_create_mesh() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).create_mesh) as usize - ptr as usize
            },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(create_mesh)
            )
        );
    }
    test_field_create_mesh();
    fn test_field_destroy_mesh() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).destroy_mesh) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(destroy_mesh)
            )
        );
    }
    test_field_destroy_mesh();
    fn test_field_create_accel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).create_accel) as usize - ptr as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(create_accel)
            )
        );
    }
    test_field_create_accel();
    fn test_field_destroy_accel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).destroy_accel) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(destroy_accel)
            )
        );
    }
    test_field_destroy_accel();
    fn test_field_query() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).query) as usize - ptr as usize
            },
            304usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(query)
            )
        );
    }
    test_field_query();
    fn test_field_requires_command_reordering() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<LCDeviceInterface>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).requires_command_reordering) as usize - ptr as usize
            },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(LCDeviceInterface),
                "::",
                stringify!(requires_command_reordering)
            )
        );
    }
    test_field_requires_command_reordering();
}
extern "C" {
    pub fn luisa_compute_create_external_device(
        ctx: LCContext,
        impl_: *mut LCDeviceInterface,
    ) -> LCDevice;
}
extern "C" {
    pub fn luisa_compute_init();
}
extern "C" {
    pub fn luisa_compute_app_context() -> LCAppContext;
}
extern "C" {
    pub fn luisa_compute_set_app_context(ctx: LCAppContext);
}
extern "C" {
    pub fn luisa_compute_free_c_string(cs: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn luisa_compute_context_create(exe_path: *const ::std::os::raw::c_char) -> LCContext;
}
extern "C" {
    pub fn luisa_compute_context_destroy(ctx: LCContext);
}
extern "C" {
    pub fn luisa_compute_context_add_search_path(
        ctx: LCContext,
        path: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn luisa_compute_context_runtime_directory(ctx: LCContext) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn luisa_compute_context_cache_directory(ctx: LCContext) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn luisa_compute_device_create(
        ctx: LCContext,
        name: *const ::std::os::raw::c_char,
        properties: *const ::std::os::raw::c_char,
    ) -> LCDevice;
}
extern "C" {
    pub fn luisa_compute_device_destroy(device: LCDevice);
}
extern "C" {
    pub fn luisa_compute_device_retain(device: LCDevice);
}
extern "C" {
    pub fn luisa_compute_device_release(device: LCDevice);
}
extern "C" {
    pub fn luisa_compute_device_native_handle(device: LCDevice) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn luisa_compute_buffer_create(device: LCDevice, size: size_t) -> LCBuffer;
}
extern "C" {
    pub fn luisa_compute_buffer_destroy(device: LCDevice, buffer: LCBuffer);
}
extern "C" {
    pub fn luisa_compute_buffer_native_handle(
        device: LCDevice,
        buffer: LCBuffer,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn luisa_compute_texture_create(
        device: LCDevice,
        format: u32,
        dim: u32,
        w: u32,
        h: u32,
        d: u32,
        mips: u32,
    ) -> LCTexture;
}
extern "C" {
    pub fn luisa_compute_texture_destroy(device: LCDevice, texture: LCTexture);
}
extern "C" {
    pub fn luisa_compute_stream_create(device: LCDevice) -> LCStream;
}
extern "C" {
    pub fn luisa_compute_stream_destroy(device: LCDevice, stream: LCStream);
}
extern "C" {
    pub fn luisa_compute_stream_synchronize(device: LCDevice, stream: LCStream);
}
extern "C" {
    pub fn luisa_compute_stream_dispatch(
        device: LCDevice,
        stream: LCStream,
        cmd_list: LCCommandList,
    );
}
extern "C" {
    pub fn luisa_compute_stream_native_handle(
        device: LCDevice,
        stream: LCStream,
        handle: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn luisa_compute_shader_create(
        device: LCDevice,
        func: LCKernelModule,
        options: *const ::std::os::raw::c_char,
    ) -> LCShader;
}
extern "C" {
    pub fn luisa_compute_shader_destroy(device: LCDevice, shader: LCShader);
}
extern "C" {
    pub fn luisa_compute_event_create(device: LCDevice) -> LCEvent;
}
extern "C" {
    pub fn luisa_compute_event_destroy(device: LCDevice, event: LCEvent);
}
extern "C" {
    pub fn luisa_compute_event_signal(device: LCDevice, event: LCEvent, stream: LCStream);
}
extern "C" {
    pub fn luisa_compute_event_wait(device: LCDevice, event: LCEvent, stream: LCStream);
}
extern "C" {
    pub fn luisa_compute_event_synchronize(device: LCDevice, event: LCEvent);
}
extern "C" {
    pub fn luisa_compute_bindless_array_create(device: LCDevice, n: size_t) -> LCBindlessArray;
}
extern "C" {
    pub fn luisa_compute_bindless_array_destroy(device: LCDevice, array: LCBindlessArray);
}
extern "C" {
    pub fn luisa_compute_bindless_array_emplace_buffer(
        device: LCDevice,
        array: LCBindlessArray,
        index: size_t,
        buffer: LCBuffer,
    );
}
extern "C" {
    pub fn luisa_compute_bindless_array_emplace_tex2d(
        device: LCDevice,
        array: LCBindlessArray,
        index: size_t,
        texture: LCTexture,
        sampler: LCSampler,
    );
}
extern "C" {
    pub fn luisa_compute_bindless_array_emplace_tex3d(
        device: LCDevice,
        array: LCBindlessArray,
        index: size_t,
        texture: LCTexture,
        sampler: LCSampler,
    );
}
extern "C" {
    pub fn luisa_compute_bindless_array_remove_buffer(
        device: LCDevice,
        array: LCBindlessArray,
        index: size_t,
    );
}
extern "C" {
    pub fn luisa_compute_bindless_array_remove_tex2d(
        device: LCDevice,
        array: LCBindlessArray,
        index: size_t,
    );
}
extern "C" {
    pub fn luisa_compute_bindless_array_remove_tex3d(
        device: LCDevice,
        array: LCBindlessArray,
        index: size_t,
    );
}
extern "C" {
    pub fn luisa_compute_mesh_create(
        device: LCDevice,
        v_buffer: LCBuffer,
        v_offset: size_t,
        v_stride: size_t,
        v_count: size_t,
        t_buffer: LCBuffer,
        t_offset: size_t,
        t_count: size_t,
        hint: LCAccelUsageHint,
    ) -> LCMesh;
}
extern "C" {
    pub fn luisa_compute_mesh_destroy(device: LCDevice, mesh: LCMesh);
}
extern "C" {
    pub fn luisa_compute_accel_create(device: LCDevice, hint: LCAccelUsageHint) -> LCAccel;
}
extern "C" {
    pub fn luisa_compute_accel_destroy(device: LCDevice, accel: LCAccel);
}
extern "C" {
    pub fn luisa_compute_accel_emplace_back(
        accel: LCAccel,
        mesh: *mut ::std::os::raw::c_void,
        transform: *const ::std::os::raw::c_void,
        visibility: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn luisa_compute_accel_emplace(
        accel: LCAccel,
        index: size_t,
        mesh: *mut ::std::os::raw::c_void,
        transform: *const ::std::os::raw::c_void,
        visibility: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn luisa_compute_accel_set_transform(
        accel: LCAccel,
        index: size_t,
        transform: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn luisa_compute_accel_set_visibility(
        accel: LCAccel,
        index: size_t,
        visibility: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn luisa_compute_accel_pop_back(accel: LCAccel);
}
extern "C" {
    pub fn luisa_compute_pixel_format_to_storage(format: LCPixelFormat) -> LCPixelStorage;
}
extern "C" {
    pub fn luisa_compute_set_log_level_verbose();
}
extern "C" {
    pub fn luisa_compute_set_log_level_info();
}
extern "C" {
    pub fn luisa_compute_set_log_level_warning();
}
extern "C" {
    pub fn luisa_compute_set_log_level_error();
}
extern "C" {
    pub fn luisa_compute_log_verbose(msg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn luisa_compute_log_info(msg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn luisa_compute_log_warning(msg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn luisa_compute_log_error(msg: *const ::std::os::raw::c_char);
}
